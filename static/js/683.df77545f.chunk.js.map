{"version":3,"file":"static/js/683.df77545f.chunk.js","mappings":"6SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,WAAOC,GAAP,gFAC1BC,EAAU,CAACC,OAAQF,EAAWE,QADJ,SAETL,EAAAA,GAAAA,IAAA,qCAAwCC,GAAWG,GAF1C,cAE1BE,EAF0B,yBAGzBA,EAASC,KAAKC,SAHW,2CAAH,sDAMlBC,EAAiB,mCAAG,WAAOC,GAAP,uFACRV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,4BAAyCT,IADjC,cACzBK,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,sDAKjBG,EAAc,mCAAG,WAAOD,GAAP,uFACLV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,4BAAyCT,IADpC,cACtBK,EADsB,yBAErBA,EAASC,KAAKK,MAFO,2CAAH,sDAKdC,EAAiB,mCAAG,WAAOC,GAAP,uFACRd,EAAAA,GAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEa,EAAlE,YADQ,cACzBR,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,sDAKjBO,EAAc,mCAAG,WAAOL,GAAP,uFACLV,EAAAA,GAAAA,IAAA,gBAAmBU,EAAnB,oBAAiCT,IAD5B,cACtBK,EADsB,yBAErBA,EAASC,MAFY,2CAAH,qD,2LCvBdS,EAAUC,EAAAA,GAAAA,IAAH,qGAMPC,EAAQD,EAAAA,GAAAA,IAAH,iGAMLE,GAASF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,mSAaNI,EAAcJ,EAAAA,GAAAA,IAAH,uHAOXK,EAAQL,EAAAA,GAAAA,GAAH,6CAILM,EAAQN,EAAAA,GAAAA,EAAH,iEAKLO,EAAeP,EAAAA,GAAAA,EAAH,iEAKZQ,GAAOR,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,oW,kBC1CXS,EAAa,CACjBC,MAAO,GACPC,YAAa,GACbC,aAAc,GACdC,SAAU,GACVC,OAAQ,IAGGC,EAAmB,WAAO,IAAD,IAC3BC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAST,GAAnC,eAAOU,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACPC,EAAAA,GAAmBR,GAASS,KAAKL,GAAUM,MAAM,QAClD,GACC,CAACV,IAGH,IAAQN,EAAsDS,EAAtDT,MAAOC,EAA+CQ,EAA/CR,YAAaC,EAAkCO,EAAlCP,aAAcC,EAAoBM,EAApBN,SACpCc,EADwDR,EAAVL,OACzBc,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACnDC,EAAY,oBAAGX,EAASY,aAAZ,aAAG,EAAgBC,YAAnB,QAA0B,IAE5C,OACE,iCACA,SAAC1B,EAAD,CAAM2B,GAAIH,EAAV,sBACA,iCACF,UAACjC,EAAD,YACE,SAACE,EAAD,CAAOmC,IAAKzB,EAAW,yCACeA,GAChC0B,EAAgBC,IAAK5B,KAE3B,UAACN,EAAD,YACI,SAACC,EAAD,UAAQK,KACR,UAACJ,EAAD,0BAAkC,GAAdM,EAApB,SACA,SAACN,EAAD,wBACA,SAACC,EAAD,UAAeM,KACf,SAACP,EAAD,sBACA,uBAAIqB,WAGP,2BACC,SAACzB,EAAD,WACA,SAAC,KAAD,CAASiC,GAAG,OAAOF,MAAO,CAAEC,KAAMF,GAAlC,qBAEA,SAAC9B,EAAD,WACE,SAAC,KAAD,CAASiC,GAAG,UAAUF,MAAO,CAAEC,KAAMF,GAArC,+BAOT,EACD,G","sources":["api/movies-api.js","pages/MovieDetailsPage/MovieDetailsPage.style.js","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3290f7c502e8a1167263be702b28bdfc';\n  \nexport const fetchPopularMovies = async (controller) => {\n  const options = {signal: controller.signal };\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`, options);\n  return response.data.results;\n}\n\nexport const fetchMovieReviews = async (id) => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data.results;\n}\n\nexport const fetchMovieCast = async (id) => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data.cast;\n}\n\nexport const fetchMovieDetails = async (query) => {\n  const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`);\n  return response.data.results;\n}\n\nexport const fetchMovieById = async (id) => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport const fetchGenres = async () => {\n  const response = await axios.get(`genre/movie/list?api_key=${API_KEY}`);\n  return response.data.results;\n}","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #ccc;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  width: 500px;\n  height: auto;\n`;\nexport const Button = styled(NavLink)`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin-right: 20px;\n  width: 100px;\n  padding: 10px 0;\n  border: 1px solid black;\n  border-radius: 5px;\n  background-color: whitesmoke;\n  box-shadow: 0px 0px 10px 1px blanchedalmond;\n`;\n\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-basis: fit-content;\n  margin-left: 30px;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n`;\n\nexport const Label = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const OverviewText = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Path = styled(NavLink)`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin-left: 140px;\n  margin-bottom: 20px;\n  width: 100px;\n  padding: 10px 0;\n  border-radius: 5px;\n  background-color: whitesmoke;\n  box-shadow: 0px 0px 10px 1px blanchedalmond;\n  &.active {\n    color: black;\n    background-color: orange;\n  }\n`;\n","import { NavLink, useParams, useLocation} from 'react-router-dom';\nimport { useState, useEffect} from 'react';\nimport * as Api from './../../api/movies-api';\nimport {Image, Label, OverviewText, Wrapper, Description, Title, Path, Button } from './MovieDetailsPage.style';\nimport placeholderImg from './../../img/poster.jpg';\nimport PropTypes from 'prop-types';\n\nconst INIT_STATE = {\n  title: '',\n  poster_path: '',\n  vote_average: '',\n  overview: '',\n  genres: [],\n  };\n\nexport const MovieDetailsPage = () => {\n   const { movieId } = useParams();\n   const [movie, setMovie] = useState(INIT_STATE);\n   const location = useLocation();\n\n   useEffect(() => {\n      Api.fetchMovieById(movieId).then(setMovie).catch('error');\n    }\n    , [movieId]);\n\n\n    const { title, poster_path, vote_average, overview, genres} = movie;\n    const movieGenres = genres.map(genre => genre.name).join(', ');\n    const backLinkHref = location.state?.from?? '/';\n  \n    return (\n      <>\n      <Path to={backLinkHref}>Go Back</Path>\n      <>\n    <Wrapper>\n      <Image src={poster_path ? \n          `https://image.tmdb.org/t/p/w300${poster_path}` \n          : placeholderImg} alt={title} \n          />\n      <Description>\n          <Title>{title}</Title>\n          <Label>User score: {vote_average *10} %</Label>\n          <Label>Overview</Label>\n          <OverviewText>{overview}</OverviewText>\n          <Label>Genres</Label>\n          <p>{movieGenres}</p>\n      </Description>\n      </Wrapper>\n       <ul>\n        <Button>\n        <NavLink to=\"cast\" state={{ from: backLinkHref }}>Cast</NavLink>\n        </Button>\n        <Button>\n          <NavLink to=\"reviews\" state={{ from: backLinkHref }}>Reviews</NavLink>\n        </Button>\n      </ul> \n       </>\n    \n</>\n    )\n}\nexport default MovieDetailsPage;\n\nMovieDetailsPage.propTypes = {\n  id: PropTypes.string,\n}"],"names":["axios","API_KEY","fetchPopularMovies","controller","options","signal","response","data","results","fetchMovieReviews","id","fetchMovieCast","cast","fetchMovieDetails","query","fetchMovieById","Wrapper","styled","Image","Button","NavLink","Description","Title","Label","OverviewText","Path","INIT_STATE","title","poster_path","vote_average","overview","genres","MovieDetailsPage","movieId","useParams","useState","movie","setMovie","location","useLocation","useEffect","Api","then","catch","movieGenres","map","genre","name","join","backLinkHref","state","from","to","src","placeholderImg","alt"],"sourceRoot":""}