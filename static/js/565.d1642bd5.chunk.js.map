{"version":3,"file":"static/js/565.d1642bd5.chunk.js","mappings":"sKAAO,IAAMA,EAAmB,iC,qKCE1BC,EAAMC,EAAAA,GAAAA,OAAa,CACvBC,QAAS,mCACTC,KAAM,OACNC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAOdC,EAAU,mCAEHC,EAAkB,mCAAG,6FAC1BC,EAAc,CAClBC,MAAO,KACPC,KAAM,OACNC,KAAM,MAERC,QAAQC,IAAI,sBANoB,SAQTb,EAAIc,IAAJ,iBAA0B,CAAEC,OAAQP,IAR3B,cAQ1BQ,EAR0B,OAShCJ,QAAQC,IAAIG,EAASC,MATW,kBAUzBD,EAASC,KAAKC,SAVW,2CAAH,qDAalBC,EAAiB,mCAAG,WAAOC,EAAIC,GAAX,gFACzBC,EAAU,CAAEC,OAAQF,EAAWE,QADN,SAERtB,EAAAA,GAAAA,IAAA,gBACZmB,EADY,4BACUd,GAC/BgB,GAJ6B,cAEzBN,EAFyB,yBAMxBA,EAASC,MANe,2CAAH,wDASjBO,EAAc,mCAAG,WAAOJ,EAAIC,GAAX,gFACtBC,EAAU,CAAEC,OAAQF,EAAWE,QADT,SAELtB,EAAAA,GAAAA,IAAA,gBACZmB,EADY,4BACUd,GAC/BgB,GAJ0B,cAEtBN,EAFsB,yBAMrBA,EAASC,MANY,2CAAH,wDAkBdQ,EAAc,mCAAG,WAAOL,EAAIC,GAAX,gFACtBC,EAAU,CAAEC,OAAQF,EAAWE,QADT,SAELtB,EAAAA,GAAAA,IAAA,gBAAmBmB,EAAnB,oBAAiCd,GAAWgB,GAFvC,cAEtBN,EAFsB,yBAGrBA,EAASC,MAHY,2CAAH,uD,6JCtDdS,EAASC,EAAAA,GAAAA,IAAH,2JAQNC,EAAeD,EAAAA,GAAAA,IAAH,2IAUZE,EAAaF,EAAAA,GAAAA,IAAH,yG,SCgCvB,MA7CA,WACE,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACR,IAAMd,EAAa,IAAIe,gBAIvB,OAHAC,EAAAA,GAAsBJ,EAASZ,GAAYiB,MAAK,SAAArB,GAAI,OAAIe,EAAWf,EAAKC,QAApB,IAA8BqB,OAAM,SAAAC,GACpFC,IAAAA,OAAAA,QAAA,2FAA2CD,EAAME,SAAW,CAAEC,SAAU,aAAcC,UAAW,KACpG,IACM,WACLvB,EAAWwB,OACZ,CACF,GAAE,CAACZ,KAGU,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASe,QAAS,GACvB,wBACGf,EAAQgB,KACP,YAAuE,IAApE3B,EAAmE,EAAnEA,GAAI4B,EAA+D,EAA/DA,OAAQC,EAAuD,EAAvDA,QAAwCC,EAAe,EAA9CC,eAAkBC,YACxC,OACE,yBACE,UAACvB,EAAD,YACE,UAACD,EAAD,YACE,SAACF,EAAD,CACE2B,IAC0B,WAAlB,OAANH,QAAM,IAANA,OAAA,EAAAA,EAAQI,MAAM,EAAG,IACbJ,EAAOI,MAAM,EAAGJ,EAAOJ,QAD3B,UAEO/C,EAAAA,GAFP,OAE0BmD,GAE5BK,IAAKP,KAEP,wBAAKA,QAEP,uBAAIC,QAbC7B,EAiBZ,OAIL,uCAEH,C","sources":["api/imageDefaultLink.js","api/movies-api.js","components/Reviews/ReviewsStyled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["export const imageDefaultLink = \"https://image.tmdb.org/t/p/w500\";","import axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'http://185.233.118.244:8080/user',\n  mode: 'cors',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n\n  // baseURL: \"http://localhost:8080/user\",\n});\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3290f7c502e8a1167263be702b28bdfc';\n\nexport const fetchPopularMovies = async () => {\n  const bodyRequest = {\n    month: '03',\n    type: 'done',\n    year: 2023,\n  };\n  console.log('fetchPopularMovies');\n  // const options = { signal: controller.signal };\n  const response = await API.get(`/api/finances/`, { params: bodyRequest });\n  console.log(response.data);\n  return response.data.results;\n};\n\nexport const fetchMovieReviews = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async (query, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`, options);\n  return response.data;\n};\n\nexport const fetchGenres = async controller => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `genre/movie/list?api_key=${API_KEY}`,\n    options\n  );\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const Avatar = styled.img`\n   width: 70px;\n    height: 70px;\n    border-radius: 50%;\n    background-repeat: no-repeat;\n    \n    background-size: cover;\n`;\nexport const AuthorReview = styled.div`\n     display: flex;\n    align-items: center;\n    > h3 {\n    margin-left: 20px;\n}\n> p {\ntext-align: left;\n}\n`;\nexport const CardReview = styled.div`\nmargin-top: 50px;\nborder: 1px solid grey;\npadding: 10px;\nborder-radius: 5px;\n`;\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { imageDefaultLink } from '../../api/imageDefaultLink';\nimport Notiflix from 'notiflix';\nimport * as api from '../../api/movies-api';\nimport { CardReview, AuthorReview, Avatar } from './ReviewsStyled';\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    api.fetchMovieReviews(movieId, controller).then(data => setReviews(data.results)).catch(error => {\n        Notiflix.Notify.failure(`Ошибка запроса: ${error.message}`, { position: \"top-center\", autoClose: 2000 } ); \n    });;\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n \n  return reviews?.length > 0 ? (\n    <ul>\n      {reviews.map(\n        ({ id, author, content, author_details: { avatar_path: avatar } }) => {\n          return (\n            <li key={id}>\n              <CardReview>\n                <AuthorReview>\n                  <Avatar\n                    src={\n                      avatar?.slice(1, 6) === 'https'\n                        ? avatar.slice(1, avatar.length)\n                        : `${imageDefaultLink}${avatar}`\n                    }\n                    alt={author}\n                  />\n                  <h3>{author}</h3>\n                </AuthorReview>\n                <p>{content}</p>\n              </CardReview>\n            </li>\n          );\n        }\n      )}\n    </ul>\n  ) : (\n    <div>No reviews</div>\n  );\n}\n\nexport default Reviews;\n"],"names":["imageDefaultLink","API","axios","baseURL","mode","headers","Accept","API_KEY","fetchPopularMovies","bodyRequest","month","type","year","console","log","get","params","response","data","results","fetchMovieReviews","id","controller","options","signal","fetchMovieCast","fetchMovieById","Avatar","styled","AuthorReview","CardReview","useState","reviews","setReviews","movieId","useParams","useEffect","AbortController","api","then","catch","error","Notiflix","message","position","autoClose","abort","length","map","author","content","avatar","author_details","avatar_path","src","slice","alt"],"sourceRoot":""}