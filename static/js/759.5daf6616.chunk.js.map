{"version":3,"file":"static/js/759.5daf6616.chunk.js","mappings":"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","sources":["api/imageDefaultLink.js","api/movies-api.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","pages/MoviesPage/MoviesPage.styled.js","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["export const imageDefaultLink = \"https://image.tmdb.org/t/p/w500\";","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3290f7c502e8a1167263be702b28bdfc';\n  \nexport const fetchPopularMovies = async (controller) => {\n  const options = {signal: controller.signal };\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`, options);\n  return response.data.results;\n}\n\nexport const fetchMovieReviews = async (id) => {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport const fetchMovieCast = async (id) => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport const fetchMovieDetails = async (query, controller) => {\n  console.log(\"fetchMovieDetails\");\n  const options = {signal: controller.signal };\n  const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`, options);\n  return response.data.results;\n}\n\nexport const fetchMovieById = async (id, controller) => {\n  console.log(\"fetchMovieById\");\n  const options = {signal: controller.signal };\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`, options);\n  return response.data;\n}\n\nexport const fetchGenres = async () => {\n  const response = await axios.get(`genre/movie/list?api_key=${API_KEY}`);\n  return response.data.results;\n}","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n    font-size: 18px;\n    padding: 7px 12px;\n    margin-left: 10px;\n    background-color: orangered;\n    border: 0;\n    border-radius: 4px;\n    color: white;\n    cursor: pointer;\n    transition: background-color linear 250ms;\n    &:hover {\n        background-color: #c20a4e;\n    }\n`;","import { useState } from 'react';\nimport {Button} from './SearchBar.styled';\n\nexport const SearchBar = ({ onSearch }) => {\n    const [value, setValue] = useState('');\n    \n    const handleSubmit = e => {\n        e.preventDefault();\n    \n        const query = value.trim();\n        if (query) {\n        onSearch(query);\n        setValue('');\n        }\n    };\n    \n    return (\n        <>\n        <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={value} onChange={e => setValue(e.target.value)} />\n        <Button type=\"submit\">Search</Button>\n        </form>\n        </>\n    );\n}\n    \nexport default SearchBar;","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Input = styled.input`\n    padding: 5px 10px;\n    font-size: 16px;\n    outline: 0px solid #e30b5c;\n    border-radius: 4px;\n    transition: border-color linear 250ms;\n     &:focus {\n        outline: 0;\n        border-color: #e30b5c;\n    }\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 20px;\n  > img {\n    width: 100%;\n    height: auto;\n  }\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 1200px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  \n  `;\n\nexport const StyledLink = styled(NavLink)`\n    color: #000;\n    font-size: 1.2rem;\n    text-decoration: none;\n    &:hover {\n        color: orangered;\n    }\n`;\n\nexport const SearchContainer = styled.div`\n    display: block;\n`;","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport * as Api from '../../api/movies-api';\nimport { SearchBar } from '../../components/SearchBar/SearchBar';\nimport { Container } from '../../components/Container/Container';\nimport defaultImg from '../../img/portrait_placeholder.png';\nimport { imageDefaultLink } from '../../api/imageDefaultLink';\nimport { StyledLink, List } from './MoviesPage.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  const handleSearch = value => {\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const query = searchParams.get('query') ?? '';\n    if (query) {\n      Api.fetchMovieDetails(query, controller).then(movies => setMovies(movies));\n      return () => {\n        controller.abort();\n      };\n    }\n  }, [searchParams]);\n\n \n  return (\n    <Container>\n      <SearchBar onSearch={handleSearch} />\n      {movies.length > 0 && (\n        <List>\n          {movies.map(({ id, title, poster_path }) => (\n            <li key={id}>\n              <StyledLink to={`${id}`} state={{ from: location }}>\n                <img\n                  src={\n                    poster_path\n                      ? `${imageDefaultLink}${poster_path}`\n                      : defaultImg\n                  }\n                  alt={title}\n                />\n                <h3>{title}</h3>\n              </StyledLink>\n            </li>\n          ))}\n        </List>\n      )}\n    </Container>\n  );\n};\n\nexport default MoviesPage;\n\nMoviesPage.propTypes = {\n  search: PropTypes.string,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n};\n"],"names":["imageDefaultLink","axios","API_KEY","fetchPopularMovies","controller","options","signal","response","data","results","fetchMovieReviews","id","fetchMovieCast","fetchMovieDetails","query","console","log","fetchMovieById","Button","styled","SearchBar","onSearch","useState","value","setValue","onSubmit","e","preventDefault","trim","type","onChange","target","List","StyledLink","NavLink","MoviesPage","movies","setMovies","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","AbortController","get","Api","then","abort","Container","length","map","title","poster_path","to","state","from","src","defaultImg","alt"],"sourceRoot":""}