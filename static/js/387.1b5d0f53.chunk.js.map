{"version":3,"file":"static/js/387.1b5d0f53.chunk.js","mappings":"sKAAO,IAAMA,EAAmB,iC,qKCE1BC,EAAMC,EAAAA,GAAAA,OAAa,CACvBC,QAAS,mCACTC,KAAM,OACNC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAOdC,EAAU,mCAEHC,EAAkB,mCAAG,6FAC1BC,EAAc,CAClBC,MAAO,KACPC,KAAM,OACNC,KAAM,MAERC,QAAQC,IAAI,sBANoB,SAQTb,EAAIc,IAAJ,iBAA0B,CAAEC,OAAQP,IAR3B,cAQ1BQ,EAR0B,OAShCJ,QAAQC,IAAIG,EAASC,MATW,kBAUzBD,EAASC,KAAKC,SAVW,2CAAH,qDAalBC,EAAiB,mCAAG,WAAOC,EAAIC,GAAX,gFACzBC,EAAU,CAAEC,OAAQF,EAAWE,QADN,SAERtB,EAAAA,GAAAA,IAAA,gBACZmB,EADY,4BACUd,GAC/BgB,GAJ6B,cAEzBN,EAFyB,yBAMxBA,EAASC,MANe,2CAAH,wDASjBO,EAAc,mCAAG,WAAOJ,EAAIC,GAAX,gFACtBC,EAAU,CAAEC,OAAQF,EAAWE,QADT,SAELtB,EAAAA,GAAAA,IAAA,gBACZmB,EADY,4BACUd,GAC/BgB,GAJ0B,cAEtBN,EAFsB,yBAMrBA,EAASC,MANY,2CAAH,wDAkBdQ,EAAc,mCAAG,WAAOL,EAAIC,GAAX,gFACtBC,EAAU,CAAEC,OAAQF,EAAWE,QADT,SAELtB,EAAAA,GAAAA,IAAA,gBAAmBmB,EAAnB,oBAAiCd,GAAWgB,GAFvC,cAEtBN,EAFsB,yBAGrBA,EAASC,MAHY,2CAAH,uD,oKCtDdS,EAAWC,EAAAA,GAAAA,GAAH,yHAORC,EAAWD,EAAAA,GAAAA,GAAH,8N,SCuCrB,MAxCA,WACE,OAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACMC,GAAUC,EAAAA,EAAAA,MAAYD,QAY5B,OAVAE,EAAAA,EAAAA,YAAU,WACR,IAAMZ,EAAa,IAAIa,gBAIvB,OAHAC,EAAAA,GAAmBJ,EAASV,GAAYe,MAAK,SAAApB,GAAQ,OAAIc,EAAQd,EAASqB,KAArB,IAA4BC,OAAM,SAAAC,GACrFC,IAAAA,OAAAA,QAAA,2FAA2CD,EAAME,SAAW,CAAEC,SAAU,aAAcC,UAAW,KACpG,IACQ,WACLtB,EAAWuB,OACZ,CACF,GAAE,CAACb,IAGFd,IACE,SAACS,EAAD,UACGT,EAAK4B,KAAI,SAAA7B,GACR,OACE,SAACY,EAAD,WACE,4BACE,gBACEkB,IACE9B,EAAS+B,aAAT,UACOhD,EAAAA,GADP,OAC0BiB,EAAS+B,cAC/BC,EAENC,IAAKjC,EAASkC,QAEhB,wBAAKlC,EAASkC,QACd,uBAAIlC,EAASmC,gBAXFnC,EAASI,GAe3B,KAIR,C","sources":["api/imageDefaultLink.js","api/movies-api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["export const imageDefaultLink = \"https://image.tmdb.org/t/p/w500\";","import axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'http://185.233.118.244:8080/user',\n  mode: 'cors',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n\n  // baseURL: \"http://localhost:8080/user\",\n});\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3290f7c502e8a1167263be702b28bdfc';\n\nexport const fetchPopularMovies = async () => {\n  const bodyRequest = {\n    month: '03',\n    type: 'done',\n    year: 2023,\n  };\n  console.log('fetchPopularMovies');\n  // const options = { signal: controller.signal };\n  const response = await API.get(`/api/finances/`, { params: bodyRequest });\n  console.log(response.data);\n  return response.data.results;\n};\n\nexport const fetchMovieReviews = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async (query, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`, options);\n  return response.data;\n};\n\nexport const fetchGenres = async controller => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `genre/movie/list?api_key=${API_KEY}`,\n    options\n  );\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin-top: 50px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  max-width: 300px;\n  margin-right: 15px;\n  margin-bottom: 25px;\n  > p {\n    font-size: 16px;\n    font-weight: 700;\n  }\n  > img {\n    width: 100%;\n  }\n  > h3 {\n    font-size: 14px;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { imageDefaultLink } from '../../api/imageDefaultLink';\nimport Notiflix from 'notiflix';\nimport * as api from '../../api/movies-api';\nimport placeholderImage from '../../img/portrait_placeholder.png';\nimport { CastList, CastItem } from './Cast.styled';\n\nfunction Cast() {\n  const [data, setData] = useState(null);\n  const movieId = useParams().movieId;\n\n  useEffect(() => {\n    const controller = new AbortController();\n    api.fetchMovieCast(movieId, controller).then(response => setData(response.cast)).catch(error => {\n      Notiflix.Notify.failure(`Ошибка запроса: ${error.message}`, { position: \"top-center\", autoClose: 2000 } ); \n  });;\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    data && (\n      <CastList>\n        {data.map(response => {\n          return (\n            <CastItem key={response.id}>\n              <div>\n                <img\n                  src={\n                    response.profile_path\n                      ? `${imageDefaultLink}${response.profile_path}`\n                      : placeholderImage\n                  }\n                  alt={response.name}\n                />\n                <h3>{response.name}</h3>\n                <p>{response.character}</p>\n              </div>\n            </CastItem>\n          );\n        })}\n      </CastList>\n    )\n  );\n}\n\nexport default Cast;\n"],"names":["imageDefaultLink","API","axios","baseURL","mode","headers","Accept","API_KEY","fetchPopularMovies","bodyRequest","month","type","year","console","log","get","params","response","data","results","fetchMovieReviews","id","controller","options","signal","fetchMovieCast","fetchMovieById","CastList","styled","CastItem","useState","setData","movieId","useParams","useEffect","AbortController","api","then","cast","catch","error","Notiflix","message","position","autoClose","abort","map","src","profile_path","placeholderImage","alt","name","character"],"sourceRoot":""}