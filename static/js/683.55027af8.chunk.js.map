{"version":3,"file":"static/js/683.55027af8.chunk.js","mappings":"qRAEMA,EAAMC,EAAAA,GAAAA,OAAa,CACvBC,QAAS,mCACTC,KAAM,OACNC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAOdC,EAAU,mCAEHC,EAAkB,mCAAG,6FAC1BC,EAAc,CAClBC,MAAO,KACPC,KAAM,OACNC,KAAM,MAERC,QAAQC,IAAI,sBANoB,SAQTb,EAAIc,IAAJ,iBAA0B,CAAEC,OAAQP,IAR3B,cAQ1BQ,EAR0B,OAShCJ,QAAQC,IAAIG,EAASC,MATW,kBAUzBD,EAASC,KAAKC,SAVW,2CAAH,qDAalBC,EAAiB,mCAAG,WAAOC,EAAIC,GAAX,gFACzBC,EAAU,CAAEC,OAAQF,EAAWE,QADN,SAERtB,EAAAA,GAAAA,IAAA,gBACZmB,EADY,4BACUd,GAC/BgB,GAJ6B,cAEzBN,EAFyB,yBAMxBA,EAASC,MANe,2CAAH,wDASjBO,EAAc,mCAAG,WAAOJ,EAAIC,GAAX,gFACtBC,EAAU,CAAEC,OAAQF,EAAWE,QADT,SAELtB,EAAAA,GAAAA,IAAA,gBACZmB,EADY,4BACUd,GAC/BgB,GAJ0B,cAEtBN,EAFsB,yBAMrBA,EAASC,MANY,2CAAH,wDAkBdQ,EAAc,mCAAG,WAAOL,EAAIC,GAAX,gFACtBC,EAAU,CAAEC,OAAQF,EAAWE,QADT,SAELtB,EAAAA,GAAAA,IAAA,gBAAmBmB,EAAnB,oBAAiCd,GAAWgB,GAFvC,cAEtBN,EAFsB,yBAGrBA,EAASC,MAHY,2CAAH,uD,0LCrDdS,EAAUC,EAAAA,GAAAA,IAAH,qGAMPC,EAAQD,EAAAA,GAAAA,IAAH,iGAMLE,GAASF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,mSAaNI,EAAcJ,EAAAA,GAAAA,IAAH,uHAOXK,EAAQL,EAAAA,GAAAA,GAAH,6CAILM,EAAQN,EAAAA,GAAAA,EAAH,iEAKLO,EAAeP,EAAAA,GAAAA,EAAH,iEAKZQ,GAAOR,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,gY,kBChCXS,EAAa,CACjBC,MAAO,GACPC,YAAa,GACbC,aAAc,GACdC,SAAU,GACVC,OAAQ,IAGGC,EAAmB,WAAO,IAAD,IAC5BC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAST,GAAnC,eAAOU,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAM7B,EAAa,IAAI8B,gBAEvB,OADAC,EAAAA,GAAmBT,EAAStB,GAAYgC,KAAKN,GAAUO,MAAM,SACtD,WACLjC,EAAWkC,OACZ,CACF,GAAE,CAACZ,IAEJ,IAAQN,EAA2DS,EAA3DT,MAAOC,EAAoDQ,EAApDR,YAAaC,EAAuCO,EAAvCP,aAAcC,EAAyBM,EAAzBN,SAAUC,EAAeK,EAAfL,OAAQrB,EAAO0B,EAAP1B,GACtDoC,EAAcf,EAAOgB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACnDC,EAAY,oBAAGb,EAASc,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,OACE,iCACE,SAAC5B,EAAD,CAAM6B,GAAIH,EAAV,sBACA,iCACE,UAACnC,EAAD,YACE,SAACE,EAAD,CACEqC,IACE3B,EAAW,yCAC2BA,GAClC4B,EAENC,IAAK9B,KAEP,UAACN,EAAD,YACE,SAACC,EAAD,UAAQK,KACR,UAACJ,EAAD,0BAAmC,GAAfM,EAApB,SACA,SAACN,EAAD,wBACA,SAACC,EAAD,UAAeM,KACf,SAACP,EAAD,sBACA,uBAAIuB,WAGR,2BACE,SAAC3B,EAAD,WACE,SAAC,KAAD,CACEmC,GAAE,kBAAa5C,EAAb,SACF0C,MAAO,CAAEC,KAAMF,GAFjB,qBAOF,SAAChC,EAAD,WACE,SAAC,KAAD,CACEmC,GAAE,kBAAa5C,EAAb,YACF0C,MAAO,CAAEC,KAAMF,GAFjB,2BAQJ,SAAC,EAAAO,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAKT,EACD,G","sources":["api/movies-api.js","pages/MovieDetailsPage/MovieDetailsPage.style.js","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'http://185.233.118.244:8080/user',\n  mode: 'cors',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n\n  // baseURL: \"http://localhost:8080/user\",\n});\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3290f7c502e8a1167263be702b28bdfc';\n\nexport const fetchPopularMovies = async () => {\n  const bodyRequest = {\n    month: '03',\n    type: 'done',\n    year: 2023,\n  };\n  console.log('fetchPopularMovies');\n  // const options = { signal: controller.signal };\n  const response = await API.get(`/api/finances/`, { params: bodyRequest });\n  console.log(response.data);\n  return response.data.results;\n};\n\nexport const fetchMovieReviews = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchMovieCast = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async (query, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`,\n    options\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieById = async (id, controller) => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`, options);\n  return response.data;\n};\n\nexport const fetchGenres = async controller => {\n  const options = { signal: controller.signal };\n  const response = await axios.get(\n    `genre/movie/list?api_key=${API_KEY}`,\n    options\n  );\n  return response.data.results;\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #ccc;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  width: 500px;\n  height: auto;\n`;\nexport const Button = styled(NavLink)`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin-right: 20px;\n  width: 100px;\n  padding: 10px 0;\n  border: 1px solid black;\n  border-radius: 5px;\n  background-color: whitesmoke;\n  box-shadow: 0px 0px 10px 1px blanchedalmond;\n`;\n\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-basis: fit-content;\n  margin-left: 30px;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n`;\n\nexport const Label = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const OverviewText = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Path = styled(NavLink)`\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin-left: 140px;\n  margin-bottom: 20px;\n  width: 100px;\n  padding: 10px 0;\n  border: 1px solid black;\n  border-radius: 5px;\n  background-color: whitesmoke;\n  box-shadow: 0px 0px 10px 1px blanchedalmond;\n  &.active {\n    color: black;\n    background-color: orange;\n  }\n`;\n","import { NavLink, useParams, useLocation, Outlet } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Suspense } from 'react';\nimport * as Api from './../../api/movies-api';\nimport {\n  Image,\n  Label,\n  OverviewText,\n  Wrapper,\n  Description,\n  Title,\n  Path,\n  Button,\n} from './MovieDetailsPage.style';\nimport placeholderImg from './../../img/poster.jpg';\nimport PropTypes from 'prop-types';\n\nconst INIT_STATE = {\n  title: '',\n  poster_path: '',\n  vote_average: '',\n  overview: '',\n  genres: [],\n};\n\nexport const MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(INIT_STATE);\n  const location = useLocation();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    Api.fetchMovieById(movieId, controller).then(setMovie).catch('error');\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  const { title, poster_path, vote_average, overview, genres, id } = movie;\n  const movieGenres = genres.map(genre => genre.name).join(', ');\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <>\n      <Path to={backLinkHref}>Go Back</Path>\n      <>\n        <Wrapper>\n          <Image\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                : placeholderImg\n            }\n            alt={title}\n          />\n          <Description>\n            <Title>{title}</Title>\n            <Label>User score: {vote_average * 10} %</Label>\n            <Label>Overview</Label>\n            <OverviewText>{overview}</OverviewText>\n            <Label>Genres</Label>\n            <p>{movieGenres}</p>\n          </Description>\n        </Wrapper>\n        <ul>\n          <Button>\n            <NavLink\n              to={`/movies/${id}/cast`}\n              state={{ from: backLinkHref }}\n            >\n              Cast\n            </NavLink>\n          </Button>\n          <Button>\n            <NavLink\n              to={`/movies/${id}/Reviews`}\n              state={{ from: backLinkHref }}\n            >\n              Reviews\n            </NavLink>\n          </Button>\n        </ul>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </>\n    </>\n  );\n};\nexport default MovieDetailsPage;\n\nMovieDetailsPage.propTypes = {\n  id: PropTypes.string,\n};\n"],"names":["API","axios","baseURL","mode","headers","Accept","API_KEY","fetchPopularMovies","bodyRequest","month","type","year","console","log","get","params","response","data","results","fetchMovieReviews","id","controller","options","signal","fetchMovieCast","fetchMovieById","Wrapper","styled","Image","Button","NavLink","Description","Title","Label","OverviewText","Path","INIT_STATE","title","poster_path","vote_average","overview","genres","MovieDetailsPage","movieId","useParams","useState","movie","setMovie","location","useLocation","useEffect","AbortController","Api","then","catch","abort","movieGenres","map","genre","name","join","backLinkHref","state","from","to","src","placeholderImg","alt","Suspense","fallback"],"sourceRoot":""}